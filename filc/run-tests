#!/usr/bin/env ruby

require 'etc'
require 'pathname'
require 'shellwords'
require 'yaml'

raise unless system("xcrun clang -c -o filc/tests/legacy_utils.o filc/tests/legacy_utils.c -Ilibpas/src/libpas -g")
raise unless system("xcrun build/bin/clang -O3 -c -o filc/tests/utils.o filc/tests/utils.c -g")

$testDirectory = Pathname.new("filc/tests")

$tests = []

def handleArray(thing)
    return [] unless thing
    return thing if thing.is_a? Array
    [thing]
end

$testDirectory.each_entry {
    | entry |
    next if entry == Pathname.new(".")
    next if entry == Pathname.new("..")
    testName = entry.basename
    fullPath = $testDirectory + entry
    next unless fullPath.directory?
    unless (fullPath + "manifest").exist?
        puts "Skipping #{entry}, no manifest."
        next
    end
    manifest = YAML.load_file(fullPath + "manifest")
    expectedReturn = manifest["return"]
    raise unless expectedReturn == "success" or expectedReturn == "failure" or expectedReturn == "crash"
    expectedOutputs = handleArray(manifest["output-includes"])
    forbiddenOutputs = handleArray(manifest["output-excludes"])
    runScript = fullPath + "run.sh"
    compileScript = fullPath + "compile.sh"
    justRunScript = fullPath + "justRun.sh"
    justRunReleaseScript = fullPath + "justRunRelease.sh"
    subRunScript = fullPath + "subRun.sh"
    subRunSTWScript = fullPath + "subRunSTW.sh"
    subRunReleaseScript = fullPath + "subRunRelease.sh"
    binary = fullPath + testName
    compilerOutput = fullPath + "compilerOutput.txt"
    output = fullPath + "output.txt"
    outputSTW = fullPath + "outputSTW.txt"
    outputRelease = fullPath + "outputRelease.txt"
    File.open(compileScript, "w") {
        | outp |
        outp.puts "#!/bin/sh"
        outp.print "xcrun build/bin/clang -o #{Shellwords.shellescape(binary)}"
        fullPath.each_entry {
            | entry |
            next unless entry.extname == ".c"
            outp.print " "
            outp.print Shellwords.shellescape(fullPath + entry)
        }
        outp.puts " filc/tests/legacy_utils.o filc/tests/utils.o -Ifilc/tests -O2 -g >& #{Shellwords.shellescape(compilerOutput)}"
        outp.puts "if [ $? -ne 0 ]"
        outp.puts "then"
        outp.puts("    echo " + Shellwords.shellescape(runScript.to_s + ": FAIL: couldn't compile"))
        outp.puts "    cat #{Shellwords.shellescape(compilerOutput)}"
        outp.puts "    exit 1"
        outp.puts "fi"
    }
    File.open(justRunScript, "w") {
        | outp |
        outp.puts "#!/bin/sh"
        outp.puts "set -e"
        outp.puts "DYLD_LIBRARY_PATH=pizfix/lib_test #{Shellwords.shellescape(binary)}"
    }
    File.open(justRunReleaseScript, "w") {
        | outp |
        outp.puts "#!/bin/sh"
        outp.puts "set -e"
        outp.puts "#{Shellwords.shellescape(binary)}"
    }
    [{:script => subRunScript,
      :cmdPrefix => "FUGC_MIN_THRESHOLD=0",
      :justRunScript => justRunScript,
      :output => output},
     {:script => subRunSTWScript,
      :cmdPrefix => "FUGC_MIN_THRESHOLD=0 FUGC_STW=1",
      :justRunScript => justRunScript,
      :output => outputSTW},
     {:script => subRunReleaseScript,
      :cmdPrefix => "",
      :justRunScript => justRunReleaseScript,
      :output => outputRelease}].each {
        | params |
        File.open(params[:script], "w") {
            | outp |
            outp.puts "#!/bin/sh"
            outp.puts "#{params[:cmdPrefix]} FILC_EXIT_ON_PANIC=1 FILC_DUMP_SETUP=1 #{Shellwords.shellescape(params[:justRunScript])} >& #{Shellwords.shellescape(params[:output])}"
            case expectedReturn
            when "failure"
                outp.puts "if [ $? -ne 42 ]"
            when "crash"
                outp.puts "if [ $? -eq 0 ]"
            when "success"
                outp.puts "if [ $? -ne 0 ]"
            else
                raise
            end
            outp.puts "then"
            case expectedReturn
            when "failure"
                outp.puts("    echo " + Shellwords.shellescape(params[:script].to_s + ": FAIL: expected program to return failure"))
            when "crash"
                outp.puts("    echo " + Shellwords.shellescape(params[:script].to_s + ": FAIL: expected program to crash"))
            when "success"
                outp.puts("    echo " + Shellwords.shellescape(params[:script].to_s + ": FAIL: expected program to return success"))
            else
                raise
            end
            outp.puts "    cat #{Shellwords.shellescape(params[:output])}"
            outp.puts "    exit 1"
            outp.puts "fi"
            expectedOutputs.each {
                | expectedOutput |
                outp.puts "fgrep #{Shellwords.shellescape(expectedOutput)} #{Shellwords.shellescape(params[:output])} > /dev/null || {"
                outp.puts("    echo " + Shellwords.shellescape(params[:script].to_s + ": FAIL: expected output to contain #{expectedOutput}"))
                outp.puts "    cat #{Shellwords.shellescape(params[:output])}"
                outp.puts "    exit 1"
                outp.puts "}"
            }
            forbiddenOutputs.each {
                | forbiddenOutput |
                outp.puts "fgrep #{Shellwords.shellescape(forbiddenOutput)} #{Shellwords.shellescape(params[:output])} > /dev/null && {"
                outp.puts("    echo " + Shellwords.shellescape(params[:script].to_s + ": FAIL: expected output to NOT contain #{forbiddenOutput}"))
                outp.puts "    cat #{Shellwords.shellescape(params[:output])}"
                outp.puts "    exit 1"
                outp.puts "}"
            }
            outp.puts ":"
        }
    }
    File.open(runScript, "w") {
        | outp |
        outp.puts "#!/bin/sh"
        outp.puts "set -e"
        outp.puts "#{Shellwords.shellescape(compileScript)}"
        outp.puts "#{Shellwords.shellescape(subRunScript)}"
        outp.puts "#{Shellwords.shellescape(subRunSTWScript)}"
        outp.puts "#{Shellwords.shellescape(subRunReleaseScript)}"
    }
    compileScript.chmod(0755)
    justRunScript.chmod(0755)
    justRunReleaseScript.chmod(0755)
    subRunScript.chmod(0755)
    subRunSTWScript.chmod(0755)
    subRunReleaseScript.chmod(0755)
    runScript.chmod(0755)
    $tests << runScript
}

File.open("filc/tests/testmakefile", "w") {
    | outp |
    outp.print "all:"
    $tests.each_with_index {
        | test, index |
        outp.print " .t#{index}"
    }
    outp.puts
    $tests.each_with_index {
        | test, index |
        outp.puts ".t#{index}:"
        outp.puts "\t@#{Shellwords.shellescape(test)}"
        outp.puts "\t@echo -n ."
    }
}

raise unless system("make -f filc/tests/testmakefile -j #{Etc.nprocessors}")
puts "SUCCESS"

